Classes: USER, WEBSITE, APP, TILE, WORD, TURN,  BOARD, SPACE, LOBBY, RACK, RACKSPACE, BAG

USER fields: username, password, nickname, status; games

#### TO-DO #####


#### TO-ADD ####

xx	class Framework::WebSocket::Message.complete	# JSON is parsed on every msg, but msg may not be completely xfered

	class Framework::Site::User
	class Framework::Site::Page
	class Framework::Site::Page::App

	Framework::WebSocket::Page.site
	Framework::WebSocket::Page.site_connections
	Framework::WebSocket::Page.app(app_id)
	Framework::WebSocket::Page.app_connections(app_id)	

PROGRAM FLOW

	Example JSON action chain:
		# relative to the Connection object
		# connection.app(app_id).move_tile({id:"28", p:{x,y}})
		[	
			["app", app_id],
			["move_tile", {"id" : "28", "p" : {x,y}}]
		]

NOTES
	one User can have multiple Connections




NEW USER

	Example JSON action chain:
		# relative to the Connection object
		# results in connection.site.new_user({"username":"romistrub","password":"password_hash"})
		[
			["site"],
			["new_user", {"username":"romistrub","password":"password_hash"}]
		]

	If cookies for username, password: send log-in info over Websocket


class Website

	@players
	def log_in(username, password)
		check against MySQL record
		if no record for username return {false, "username does not exist"}
		if wrong password return return {false, "incorrect password for username"}
		add_player(record)
		remove password from record
		return record

USER FLOW

	Display new player (username, password) || log-in (w/ username, password), remember me
	Load Nickname, Status
	New game
